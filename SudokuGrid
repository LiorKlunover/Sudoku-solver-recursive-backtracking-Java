package com.company;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.Border;
import javax.swing.Timer;


final class SudokuGrid extends JPanel {

    private static final Font FONT = new Font("Verdana",
            Font.CENTER_BASELINE,
            20);
    private Timer timer;

    private final JTextField[][] grid;
    private final Map<JTextField, Point> mapFieldToCoordinates =
            new HashMap<>();

    private final int dimension;
    private final JPanel gridPanel;
    private final JPanel buttonPanel;
    private final JButton solveButton;
    private final JButton clearButton;
    private final JPanel[][] minisquarePanels;

    SudokuGrid(int dimension) {
        this.grid = new JTextField[dimension][dimension];
        this.dimension = dimension;

        for (int y = 0; y < dimension; ++y) {
            for (int x = 0; x < dimension; ++x) {
                JTextField field = new JTextField();
                field.addKeyListener(new SudokuCellKeyListener(this));
                mapFieldToCoordinates.put(field, new Point(x, y));
                grid[y][x] = field;
            }
        }

        this.gridPanel = new JPanel();
        this.buttonPanel = new JPanel();

        Border border = BorderFactory.createLineBorder(Color.BLACK, 1);
        Dimension fieldDimension = new Dimension(30, 30);

        for (int y = 0; y < dimension; ++y) {
            for (int x = 0; x < dimension; ++x) {
                JTextField field = grid[y][x];
                field.setBorder(border);
                field.setFont(FONT);
                field.setPreferredSize(fieldDimension);
            }
        }

        int minisquareDimension = (int) Math.sqrt(dimension);
        this.gridPanel.setLayout(new GridLayout(minisquareDimension,
                minisquareDimension));

        this.minisquarePanels = new JPanel[minisquareDimension]
                [minisquareDimension];

        Border minisquareBorder = BorderFactory.createLineBorder(Color.BLACK, 1);

        for (int y = 0; y < minisquareDimension; ++y) {
            for (int x = 0; x < minisquareDimension; ++x) {
                JPanel panel = new JPanel();
                panel.setLayout(new GridLayout(minisquareDimension,
                        minisquareDimension));
                panel.setBorder(minisquareBorder);
                minisquarePanels[y][x] = panel;
                gridPanel.add(panel);
            }
        }

        for (int y = 0; y < dimension; ++y) {
            for (int x = 0; x < dimension; ++x) {
                int minisquareX = x / minisquareDimension;
                int minisquareY = y / minisquareDimension;

                minisquarePanels[minisquareY][minisquareX].add(grid[y][x]);
            }
        }

        this.gridPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK,
                2));
        this.clearButton = new JButton("Clear");
        this.solveButton = new JButton("Solve");

        this.buttonPanel.setLayout(new BorderLayout());
        this.buttonPanel.add(clearButton, BorderLayout.WEST);
        this.buttonPanel.add(solveButton, BorderLayout.EAST);

        this.setLayout(new BorderLayout());
        this.add(gridPanel, BorderLayout.NORTH);
        this.add(buttonPanel, BorderLayout.SOUTH);


        clearButton.addActionListener((ActionEvent e) -> {
            clearAll();
        });

        solveButton.addActionListener((ActionEvent e) ->
        {
            solveSudoku();
            return;
        });

    }

    public void openFile(File file) {
        try {
            Scanner scanner = new Scanner(file);
            clearAll();

            int cells = dimension * dimension;
            int y = 0;
            int x = 0;

            while (cells > 0) {
                if (scanner.hasNext()) {
                    String text = scanner.next();

                    try {
                        int number = Integer.parseInt(text);

                        if (number > 0 && number <= dimension) {
                            grid[y][x].setText(" " + number);
                        }
                    } catch (NumberFormatException ex) {

                    }

                    ++x;

                    if (x == dimension) {
                        x = 0;
                        ++y;
                    }
                } else {
                    break;
                }

                --cells;
            }
        } catch (FileNotFoundException ex) {

        }
    }

    private void addSpace(JTextField field) {
        if (field.getText().isEmpty()) {
            field.setText(" ");
        }
    }

    void moveCursor(JTextField field, char c) {
        Point coordinates = mapFieldToCoordinates.get(field);
        field.setBackground(Color.WHITE);

        switch (c) {
            case 'w':
            case 'W':

                if (coordinates.y > 0) {
                    grid[coordinates.y - 1][coordinates.x].requestFocus();
                    addSpace(grid[coordinates.y - 1][coordinates.x]);
                }

                break;

            case 'd':
            case 'D':

                if (coordinates.x < dimension - 1) {
                    grid[coordinates.y][coordinates.x + 1].requestFocus();
                    addSpace(grid[coordinates.y][coordinates.x + 1]);
                }

                break;

            case 's':
            case 'S':

                if (coordinates.y < dimension - 1) {
                    grid[coordinates.y + 1][coordinates.x].requestFocus();
                    addSpace(grid[coordinates.y + 1][coordinates.x]);
                }

                break;

            case 'a':
            case 'A':

                if (coordinates.x > 0) {
                    grid[coordinates.y][coordinates.x - 1].requestFocus();
                    addSpace(grid[coordinates.y][coordinates.x - 1]);
                }

                break;
        }
    }

    void clearAll() {
        for (JTextField[] row : grid) {
            for (JTextField field : row) {
                field.setText("");
            }
        }
    }

    public void solveSudoku() {
        int[][] board = new int[dimension][dimension];
        for (int y = 0; y < dimension; y++)
            for (int x = 0; x < dimension; x++) {
                try {
                    board[y][x] = Integer.parseInt(grid[y][x].getText().trim());
                } catch (NumberFormatException e) {
                    continue;
                }

            }
        solveSudoku(board, 0, 0);

    }

    public boolean solveSudoku(int[][] board, int column, int raw) {
        if (raw == dimension) {
            return true;
        } else if (column == dimension)
            return solveSudoku(board, 0, raw + 1);
        else if (board[raw][column] != 0)
            return solveSudoku(board, column + 1, raw);
        return checkNumbers(board, raw, column, 1);
    }

    public boolean checkNumbers(int[][] board, int raw, int column, int num) {
        if (num > dimension) {
            board[raw][column] = 0;
            timer = new Timer(1, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    grid[raw][column].setText(" ");
                }
            });
            timer.setRepeats(false);
            timer.start();
            return false;
        } else if (isValid(board, column, raw, num)) {
            board[raw][column] = num;
            timer = new Timer(1, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    grid[raw][column].setText(" " + num);
                }
            });
            timer.setRepeats(false);
            timer.start();
            if (solveSudoku(board, column + 1, raw))
                return true;
        }
        timer = new Timer(1, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                grid[raw][column].setText(" " + num);
            }
        });
        timer.setRepeats(false);

        timer.start();
        return checkNumbers(board, raw, column, num + 1);
    }

    public boolean validRaw(int[][] board, int column, int raw, int num) {
        if (column == dimension)
            return true;
        if (board[raw][column] == num)
            return false;
        return validRaw(board, column + 1, raw, num);
    }

    public boolean validColumn(int[][] board, int column, int raw, int num) {
        if (raw == dimension)
            return true;
        if (board[raw][column] == num)
            return false;
        return validColumn(board, column, raw + 1, num);
    }

    public boolean validZone(int[][] board, int column, int raw, int num, int count) {
        if (count == dimension)
            return true;
        if (board[raw][column] == num)
            return false;
        else if (dimension == 9 && column % 3 == 2) {
            raw += 1;
            column -= 3;
        } else if (dimension == 16 && column % 4 == 3) {
            raw += 1;
            column -= 4;
        }
        return validZone(board, column + 1, raw, num, count + 1);
    }

    public boolean isValid(int[][] board, int column, int raw, int num) {
        int poinRaw = raw - raw % 3;
        int pointColumn = column - column % 3;
        if (dimension == 16) {
            poinRaw = raw - raw % 4;
            pointColumn = column - column % 4;
        }
        return validZone(board, pointColumn,poinRaw , num, 1) &&
                validColumn(board, column, 0, num) &&
                validRaw(board, 0, raw, num);
    }

}
