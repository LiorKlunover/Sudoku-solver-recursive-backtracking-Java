public class Main {
    public static void main(String[] args) {
        int [][] board = {  { 9, 6, 0, 5, 4, 0, 2, 0, 3 },
                            { 3, 0, 2, 9, 0, 0, 7, 0, 6 },
                            { 7, 0, 0, 0, 3, 0, 0, 9, 0 },
                            { 0, 2, 0, 8, 5, 0, 6, 1, 0 },
                            { 0, 9, 5, 0, 6, 3, 8, 0, 0 },
                            { 8, 0, 0, 0, 0, 4, 5, 0, 9 },
                            { 6, 0, 4, 1, 0, 0, 0, 0, 8 },
                            { 0, 0, 9, 3, 0, 0, 1, 0, 0 },
                            { 0, 1, 0, 0, 9, 8, 0, 6, 2 }};
        if (solveSudoku(board,0,0))
            print(board);
        else
            System.out.println("Not solvable");
    }

    private static void print(int[][] board)
    {
        for (int i = 0;i<9;i++) {
            for (int j = 0; j < 9; j++)
                System.out.print(board[i][j]);
            System.out.println();
        }
    }

    private static boolean solveSudoku(int[][] board,int column,int raw)
    {
        if (raw == 9)
            return true;
        else if (column == 9)
             return solveSudoku(board,0,raw+1);
        else if (board[raw][column] != 0)
             return solveSudoku(board,column+1,raw);
        return checkNumbers(board, raw, column, 1);
    }

    private static boolean checkNumbers(int[][] board,int raw, int column,int num)
    {
        if(num>9) {
            board[raw][column] = 0;
            return false;
        }
        else if (isValid(board,column,  raw, num))
            {
                board[raw][column] = num;
                if (solveSudoku(board,column+1,raw))
                    return true;
            }
        return checkNumbers(board,raw,column,num+1);
    }

    private static boolean validRaw(int[][] board,int column, int raw,int num)
    {
        if (column == 9)
            return true;
        if (board[raw][column] == num)
            return false;
        return validRaw(board,column+1,raw,num);
    }

    private static boolean validColumn(int[][] board, int column, int raw, int num)
    {
        if (raw == 9)
            return true;
        if (board[raw][column] == num)
            return false;
        return validColumn(board,column,raw+1,num);
    }

    private static boolean validZone(int[][] board,int column, int raw,int num, int count)
    {
       if (count == 9)
            return true;
        if (board[raw][column] == num)
            return false;
        else if (column % 3 == 2)
            {
                raw += 1;
                column -= 3;
            }
        return validZone(board,column+1, raw,num,count+1);
    }

    private static boolean isValid(int[][] board, int column, int raw, int num)
    {
        return 	validZone(board,column-column%3,raw-raw%3,num,1) &&
                validColumn(board,column,0,num) &&
                validRaw(board,0,raw,num);
    }
}
